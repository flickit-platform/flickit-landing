{
    "id": "386",
    "lang": "fa",
    "content": [
      {"topTitle": "مطالعه موردی جهانی"},
      {"mainTitle": "چگونه فیس‌بوک مسنجر با کاهش بدهی فنی عملکرد را بهبود داد"},
      {"subTitle": "فیس‌بوک مسنجر با بیش از یک میلیارد کاربر در سراسر جهان، به ابزاری اساسی برای ارتباطات تبدیل شد—اما در پشت صحنه با مشکلی رایج در نرم‌افزارهای در حال رشد سریع دست و پنجه نرم می‌کرد: بدهی فنی"},
      {"infoBox": [
        {"title": "منتشر شده در", "subTitle": "۴ مارس ۲۰۲۰"},
        {"title": "مدت زمان مطالعه", "subTitle": "۸ دقیقه"},
        {"title": "دسته‌بندی", "subTitle": "توسعه اپلیکیشن"}
      ]},
      {"image": "/articleTop.svg"},
      {"title": "شروع ماجرا: رشد، بدهی و بهای سرعت"},
      {"p": "مسنجر در سال ۲۰۱۱ به عنوان یک اپ چت ساده از اپلیکیشن اصلی فیس‌بوک جدا شد. تا سال ۲۰۱۳ قابلیت تماس صوتی اضافه شد. در سال ۲۰۱۵ تماس تصویری و تا سال ۲۰۱۸ کاربر می‌توانست پول ارسال کند، اوبر سفارش دهد، بازی کند، تماس گروهی بگیرد و حتی با چت‌بات‌ها صحبت کند—همه درون مسنجر."},
      {"p": "این انفجار قابلیت‌ها باعث افزایش کاربران فعال روزانه شد، اما هر قابلیت جدید به معنای کد بیشتر، اهداف ساخت بیشتر، سرویس‌های پس‌زمینه اضافه و در نهایت باگ‌های بیشتری بود. فرهنگ مدیریتی فیس‌بوک با شعار «سریع حرکت کن» شناخته می‌شود؛ اما نیمه تاریک این سرعت، کدهایی است که سریع‌تر از انتظار سفت و سخت می‌شوند."},
      {"p": "در iOS، حجم باینری مسنجر به حدود ۱۳۰ مگابایت رسید—نزدیک به سقف ۲۰۰ مگابایتی اپل برای دانلود از طریق شبکه سلولی. داشبوردهای مهندسی روندهای نگران‌کننده‌ای را نشان می‌دادند:"},
      {"ul": [
        {"li": "زمان شروع سرد بیش از ۲ ثانیه در گوشی‌های پرچمدار"},
        {"li": "کاهش دو رقمی در عملکرد در دستگاه‌های قدیمی‌تر"},
        {"li": "افزایش شکاف‌های پوشش کد در مسیرهای حیاتی که تست نداشتند"}
      ]},
      {"p": "به تنهایی این شاخص‌ها致ی نبودند، اما در کنار هم به مشکلی حیاتی اشاره داشتند: مسنجر به میدان مین بدهی فنی تبدیل شده بود. تیم‌ها بیشتر وقت‌شان را صرف دور زدن انتزاعات قدیمی می‌کردند تا توسعه قابلیت جدید—نمونه کلاسیک «مالیات نوآوری»."},
      {"title": "لحظه حقیقت: وقتی شاخص‌ها از خط قرمز عبور می‌کنند"},
      {"p": "فرهنگ فیس‌بوک مبتنی بر داده است؛ هر قابلیت مهمی یک داشبورد دارد. این عادت زمانی به کار آمد که مدیران مسنجر به دنبال یک تابع پنهان می‌گشتند تا اقدام شدید را توجیه کنند. دو عدد تصمیم را قطعی کرد:"},
      {"ul": [
        {"li": "تاخیر شروع &gt; ۲ ثانیه: مطالعات داخلی نشان می‌دادند کاربران در تاخیر بالای ۱.۵ ثانیه ریزش می‌کنند."},
        {"li": "حجم باینری ۱۳۰ مگابایت: با این روند، در عرض ۱۸ ماه به سقف ۲۰۰ مگابایت اپل می‌رسید که نیازمند سازش‌های دردناک یا جلوگیری از نصب جدید بود."}
      ]},
      {"p": "بسیاری از اپ‌ها با زمان راه‌اندازی دو ثانیه زنده می‌مانند، اما مخاطب مسنجر جهانی است و بسیاری از آن‌ها از دستگاه‌های میان‌رده استفاده می‌کنند. میانگین ۲ ثانیه روی آیفون به معنای ۳ یا ۴ ثانیه روی گوشی ۱۰۰ دلاری در برزیل یا هند بود—غیرقابل قبول برای یک ابزار چت."},
      {"p": "چاره‌ای جز اقدام رادیکال نبود. رهبری شرکت یک حسابرسی داخلی کامل را تأیید کرد—بزرگ‌ترین بازبینی کد در تاریخ مسنجر."},
      {"title": "کالبدشکافی یک حسابرسی داخلی"},
      {"p": "تیم حسابرسی از مهندسان ارشد موبایل، تحلیل‌گران عملکرد و متخصصان ابزارسازی تشکیل شد. در طول چند ماه این اقدامات انجام شد:"},
      {"ul": [
        {"li": "تحلیل ایستا (پیچیدگی، تکرار، کد مرده)"},
        {"li": "ردیابی دینامیک توالی راه‌اندازی برای شناسایی نقاط داغ"},
        {"li": "نمودار وابستگی برای یافتن فریم‌ورک‌های منسوخ"},
        {"li": "خوشه‌بندی لاگ‌های کرش برای شناسایی بخش‌های شکننده"},
        {"li": "نظرسنجی‌های درد مهندسی: بازخورد ناشناس درباره بدترین ماژول‌ها"}
      ]},
      {"p": "یافته‌ها حتی کارکنان با‌تجربه را شوکه کرد:"},
      {"p": "شاخص | قبل از حسابرسی | هدف | فاصله\n---|---|---|---\nخطوط کد (iOS) | ۱.۷ میلیون | کمتر از ۵۰۰ هزار | -۱.۲ میلیون\nتعداد کنترلرهای نمای جداگانه | ۴۰ | کمتر از ۱۰ | -۳۰\nزمان شروع سرد | ۲۰۸۰ میلی‌ثانیه | ۱۰۰۰ میلی‌ثانیه | -۱۰۸۰ میلی‌ثانیه\nحجم باینری | ۱۳۰ مگابایت | ۸۰ مگابایت | -۵۰ مگابایت"},
      {"table": {
        "thead": ["شاخص", "قبل از حسابرسی", "هدف", "فاصله"],
        "tbody": [
          ["خطوط کد (iOS)", "۱.۷ میلیون", "< ۵۰۰ هزار", "-۱.۲ میلیون"],
          ["تعداد کنترلرها", "۴۰", "< ۱۰", "-۳۰"],
          ["زمان شروع سرد", "۲۰۸۰ میلی‌ثانیه", "۱۰۰۰ میلی‌ثانیه", "-۱۰۸۰ میلی‌ثانیه"],
          ["حجم باینری", "۱۳۰ مگابایت", "۸۰ مگابایت", "-۵۰ مگابایت"]
        ]
      }},
      {"title": "پروژه LightSpeed—چهار اصل راهنما"},
      {"p": "بازنویسی ممکن است فقط پیچیدگی قدیم را با پیچیدگی جدید جایگزین کند، مگر اینکه محدودیت‌های دقیقی اعمال شود. تیم مسنجر راهبرد خود را به چهار اصل ساده تقلیل داد:"},
      {"pb": "۱. از سیستم عامل استفاده کن"},
      {"p": "اگر iOS یک پارسر JSON با عملکرد بالا دارد، دلیلی ندارد دوباره آن را بسازید. اگر UIKit مدرن مشکلی را حل می‌کند، نسخه سفارشی را کنار بگذارید. با تکیه بر فریم‌ورک‌های آزموده‌شده اپل، حجم کد و حافظه کاهش یافت."},
      {"pb": "۲. رابط کاربری را بازاستفاده کن"},
      {"p": "نسخه‌های قبلی ۴۰ کنترلر نمای جدا داشتند که بسیاری مشابه بودند. LightSpeed آن‌ها را در قالب صفحه‌های مبتنی بر الگو ادغام کرد. اکنون یک کنترلر نمای واحد فهرست، جدول و جزئیات را با خواندن یک الگو از SQLite نمایش می‌دهد."},
      {"pb": "۳. از SQLite بهره ببر"},
      {"p": "نسخه‌های قبلی از کش‌های حافظه‌ای با سیستم تراکنش بومی استفاده می‌کردند که باعث پیچیدگی می‌شد. LightSpeed همه حالت‌های معتبر را در SQLite ذخیره کرد؛ UI مستقیماً جدول‌ها را مشاهده می‌کند."},
      {"pb": "۴. بقیه را به سرور منتقل کن"},
      {"p": "در گذشته هر ویژگی به سرور خاص خود متصل بود. LightSpeed یک بروکر سرور معرفی کرد—درگاه مرکزی بین کلاینت و سرورها. این ساختار باعث حذف مسیرهای تکراری و ساده‌سازی شد."},
      {"title": "از نمونه‌سازی تا بازنویسی کامل: مهندسی هسته جدید"},
      {"p": "پس از اثبات امکان کاهش ۷۵٪، کار به چهار ربع زمانی تقسیم شد:"},
      {"ul": [
        {"li": "ربع ۱: ساخت هسته جدید شامل طرح‌بندی SQLite و ناظرهای داده"},
        {"li": "ربع ۲: مهاجرت قابلیت‌های پایه مانند چت متنی، اشتراک‌گذاری عکس، نوتیفیکیشن"},
        {"li": "ربع ۳: انتقال قابلیت‌های پیشرفته مانند صوت/تصویر و ادغام با OS"},
        {"li": "ربع ۴: حذف مسیرهای قدیمی، خاموش‌کردن فریم‌ورک‌ها و بهینه‌سازی"}
      ]},
      {"p": "تست خودکار روی نسخه‌های جدید و قدیم به موازات اجرا شد تا سازگاری حفظ شود—کاری بزرگ برای اپی با میلیاردها کاربر و صدها حالت خاص."},
      {"title": "کابوس مهاجرت—و چگونه از آن جلوگیری شد"},
      {"ul": [
        {"li": "سازگاری نوشتن دوتایی: برای ماه‌ها هر دو نسخه فعال بودند. داده‌ها باید در هر دو ظاهر می‌شدند. یک لایه میانجی نوشتن ساخته شد که اطلاعات را در هر دو اسکیما می‌نوشت."},
        {"li": "وابستگی‌های شخص ثالث: برخی SDKها جایگزین مدرن نداشتند. آن‌ها یا بازنویسی شدند یا به تعویق افتادند."},
        {"li": "فشار برای افزودن ویژگی: تیم محصول هنوز ایموجی و فیلتر جدید می‌خواست. رهبری یک توقف توسعه ۶ ماهه اعمال کرد تا از ادغام‌های متضاد جلوگیری شود."}
      ]},
      {"p": "به لطف مدیریت دقیق پروژه، «اثر سیستم دوم» هرگز رخ نداد."},
      {"title": "نتایج: وقتی '۲ برابر سریع‌تر' واقعاً اتفاق می‌افتد"},
      {"pb": "پس از ۱۲ ماه، نسخه جدید وارد اپ‌استور شد. آمارها چنین بودند:"},
      {"table": {
        "thead": ["شاخص", "قبل از LightSpeed", "بعد از LightSpeed", "بهبود"],
        "tbody": [
          ["شروع سرد (آیفون ۱۱)", "۲۰۸۰ میلی‌ثانیه", "۱۰۴۰ میلی‌ثانیه", "-۵۰٪"],
          ["حجم باینری", "۱۳۰ مگابایت", "۸۷ مگابایت", "-۳۳٪"],
          ["نرخ کرش / ۱۰۰۰ جلسه", "۳.۷", "۱.۲", "-۶۸٪"],
          ["مسیرهای فعال کد", "۴۰", "۹", "-۷۷٪"],
          ["خطوط کد", "۱.۷ میلیون", "۳۶۰ هزار", "-۷۹٪"]
        ]
      }},
      {"pb": "از نظر کیفی، کاربران چت‌های روان‌تر، پیش‌نمایش‌های سریع‌تر پیوست و کاهش پرش هنگام اسکرول را گزارش کردند. مهم‌تر از همه، توسعه‌دهندگان زمان ساخت کوتاه‌تر و درخواست‌های تغییر کوچکتری دیدند—موفقیتی فرهنگی که نوید سرعت آینده را می‌دهد."},
      {"title": "درس‌هایی برای هر تیم مهندسی گرفتار بدهی فنی"},
      {"ul": [
        {"li": "همه چیز را اندازه‌گیری کن. چیزی را که نمی‌توانی اندازه‌گیری کنی نمی‌توانی اصلاح کنی."},
        {"li": "قبل از بازنویسی حسابرسی کن. نقاط داغ را پیدا کن تا انرژی روی ۲۰٪ از کد که ۸۰٪ مشکل دارد متمرکز شود."},
        {"li": "کوچک نمونه‌سازی کن—اما بزرگ اندازه بگیر."},
        {"li": "به قابلیت‌های بومی سیستم‌عامل تکیه کن. آنها سریع‌تر به‌روزرسانی می‌شوند و آینده‌نگرترند."},
        {"li": "کد را بدهی بدان. هر خط نیاز به نگهداری دارد؛ اگر می‌توانی حذفش کنی، توسعه‌دهندگان آینده از تو تشکر خواهند کرد."},
        {"li": "برای حرکت سریع‌تر توقف کن. توقف توسعه ۶ ماهه دردناک بود اما از درگیری‌های بی‌پایان جلوگیری کرد."},
        {"li": "در مهاجرت، نوشتن دوتایی را اجرا کن تا داده‌ها در هر دو نسخه همگام بمانند."}
      ]},
      {"title": "جمع‌بندی: چه زمانی بازنویسی کنیم، چه زمانی بازسازی و چه زمانی رها کنیم"},
      {"p": "بازنویسی LightSpeed موفق بود چون اثبات کرد منافع آن در حد تغییرات اساسی است نه بهبودهای جزیی. بازنویسی پرخطر است، اما گاهی ننوشتن خطرناک‌تر است."},
      {"p": "به دنبال نقاط عطف باش: وقتی تاخیر مانع رشد کاربر می‌شود، یا حجم باینری به سقف می‌رسد، یا فرایند ورود توسعه‌دهنده کند می‌شود. اگر چند خط قرمز با هم تقاطع دارند، یک بازنویسی با حسابرسی کامل ممکن است تنها راه باشد."},
      {"p": "مسیر فیس‌بوک مسنجر یادآور این است که سلامت نرم‌افزار هرگز ثابت نیست. زود ارزیابی کن، پیوسته اندازه بگیر و از حذف میلیون‌ها خط کد برای آینده‌ای سریع‌تر نترس."}
    ]
}
