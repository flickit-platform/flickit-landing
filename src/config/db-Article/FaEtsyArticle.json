{
  "id": "363",
  "lang": "fa",
  "content": [
    { "topTitle": "مطالعه موردی جهانی" },
    {
      "mainTitle": "Etsy چگونه با خودکارسازی DevOps سرعت انتشار نسخه جدید را به ۵۰ بار در روز رساند؟"
    },
    {
      "subTitle": "یک بار قطعی جدی در محیط عملیاتی در سال ۲۰۰۹، مدیران Etsy را متقاعد کرد که انتشار هفتگی کد، از انتشار چندده‌باره‌ی روزانه خطرناک‌تر است. طی پنج سال بعد، این بازار آنلاین مستقر در بروکلین ابزاری به نام Deployinator ساخت، داشبوردهای «همه‌چیز را اندازه بگیر» را به هر کامیت وصل کرد و جلسات کالبدشکافیِ بدون مقصر (blamless post-mortem) را به بخشی از فرهنگ شرکت تبدیل کرد.تا سال ۲۰۱۴، Etsy به‌طور میانگین روزانه بیش از ۵۰ بار انتشار در محیط عملیاتی داشت. به‌روزرسانی‌های API صرفا در ۱۸ ثانیه، و انتشار کامل اپلیکیشن زیر ۳ دقیقه انجام می‌شد. در حالی که نرخ وقوع خطاها و زمان میانگین بازیابی (MTTR) دائما در حال کاهش بود."
    },
    {
      "infoBox": [
        { "title": "منتشر شده در", "subTitle": "۴ مارس ۲۰۲۰" },
        { "title": "مدت زمان مطالعه", "subTitle": "۸ دقیقه" },
        { "title": "دسته‌بندی", "subTitle": "توسعه اپلیکیشن" }
      ]
    },
    { "image": "/etsy-banner.jpeg" },
    {
      "title": "مقدمه – خطای جمعه‌شب که اولویت‌های Etsy را از نو تعریف کرد"
    },
    {
      "p": "در سوم آوریل ۲۰۰۹، یک انتشار معمولی در عصر جمعه باعث شد صفحه اصلی Etsy برای چند ساعت از دسترس خارج شود. تیم مهندسی مجبور شد روی تک‌تک سرورها وارد شود و به‌صورت دستی سایت را از نسخه پشتیبان بالا بیاورد، در حالی که فروشندگان خشمگین در شبکه‌های اجتماعی از فروش‌های از‌دست‌رفته آخر هفته می‌نوشتند. مدیر فنی جدید، چد دیکرسون، این اتفاق را «زنگ خطری جدی» توصیف کرد و از مدیر عملیات، جان آلسپا، فقط یک خواسته داشت: انتشار کد باید به چیزی امن، بی‌دردسر و پرتکرار تبدیل شود."
    },
    {
      "p": "دو عدد نشان می‌دادند Etsy در چه وضعیتی است: اول اینکه انتشارها هفته‌ای یک بار انجام می‌شد—همیشه جمعه، چون ترافیک سایت قبل از شلوغی شنبه‌ها کمتر بود. دوم اینکه هر بار انتشار بیش از ۴۰۰۰ خط کد تغییر‌کرده داشت که معمولاً چند جدول دیتابیس را هم تحت تأثیر قرار می‌داد، یعنی هر بار تغییر، می‌توانست خرابی وسیعی به‌جا بگذارد. اگر Etsy می‌خواست روی قابلیت‌هایی مثل پرداخت، جستجو یا تحلیل فروشنده‌ها آزمایش کند، نیاز به فرآیند انتشاری داشت که تغییرات را کم‌هزینه و شکست‌ها را بی‌خطر کند. آن قطعی بزرگ، جرقه‌ای بود برای سرمایه‌گذاری در این مسیر."
    },
    {
      "title": "گره اصلی؟ اسکریپت‌های دستی و قفلِ کاری جمعه‌ها"
    },
    {
      "p": "قبل از این بازطراحی، فرآیند انتشار در Etsy با یک اسکریپت bash به‌نام push.sh انجام می‌شد که فایل‌های اجرایی رو با استفاده از SCP به تک‌تک سرورهای وب کپی می‌کرد. یک مهندس عملیات لاگ‌ها رو دستی پایش می‌کرد و اگر خطاها افزایش پیدا می‌کرد، فرآیند بازگشت (rollback) رو دستی اجرا می‌کرد. این کار باعث می‌شد کل تیم مهندسی تا پایان فرایند بازیابی، از اتصال به VPN داخلی محروم شوند."
    },
    {
      "p": "توسعه‌دهنده‌ها از این قفل کاری جمعه‌ها متنفر بودند، بنابراین معمولا تغییرات را نگه داشته و همه‌چیز را یک‌جا منتشر می‌کردند: مهاجرت دیتابیس، طراحی جدید CSS، تست‌های A/B، و... همگی در یک انتشار. این تجمیع، ریسک خرابی را بالا برده و باعث می‌شد توقف‌های کاری بیشتر شوند."
    },
    {
      "p": "جان آلسپا این چرخه باطل را در کنفرانس Velocity ۲۰۱۰ این‌طور خلاصه کرد:"
    },
    {
      "p": "«ترس از انتشار باعث می‌شود هر بار تغییرات بزرگ‌تری را منتشر کنیم، و این تغییرات بزرگ‌تر، ترس را بیشتر می‌کنند.»"
    },
    {
      "p": "تنها راه نجات این بود که این معادله را برعکس کنیم:"
    },
    {
      "p": " هر تغییر را اون‌قدر کوچک کنیم که خرابی دیگر ترسناک نباشد؛ و اون‌قدر سریع و مداوم منتشر کنیم که بازیابی، کاری عادی و بدون استرس باشد."
    },
    {
      "title": "Deployinator و ChatOps – خودکارسازی مسیر انتشار در محیط عملیات"
    },
    {
      "p": "تیم آلسپا طی شش هفته اسکریپت push.sh را به ابزاری تحت وب به نام Deployinator تبدیل کرد؛ یک برنامه مبتنی بر Ruby/Sinatra با یک دکمهٔ ساده به نام «Ship It!». با فشردن این دکمه، فرآیند انتشار به‌صورت کامل و مرحله‌به‌مرحله انجام می‌شد:"
    },
    {
      "ul": [
        {
          "li": "ثبت Git SHA مربوط به انتشار"
        },
        {
          "li": "اجرای تست‌های واحد، یکپارچه و Selenium به‌صورت موازی"
        },
        {
          "li": "ساخت فایل‌های اجرایی RPM و آپلود آن‌ها در مخزن داخلی YUM"
        },
        {
          "li": "استقرار تدریجی از طریق Capistrano: ابتدا سرورهای آزمایشی (canary)، سپس نیمی از سرورها و در نهایت کل سیستم"
        },
        {
          "li": "بارگذاری داده‌ها در Memcached و کش صفحه"
        },
        {
          "li": "اعلام وضعیت هر مرحله از طریق پیام در اتاق IRC، با لینک‌های موفقیت (✓ سبز) یا شکست (✗ قرمز) به داشبوردهای Grafana"
        }
      ]
    },
    {
      "p": "اگر نرخ خطا یا تاخیر در صدک ۹۹ از مقدار میانگین معمول خود بیش از دو برابر انحراف معیار بالاتر می‌رفت، Deployinator به‌طور خودکار فرآیند بازگشت به نسخه قبلی کد را آغاز می‌کرد. این فرآیند شامل خارج‌کردن نسخه جدید از چرخه سرویس‌دهی، بارگذاری دوباره نسخه قبلی، و ثبت مجدد سرورها در لود بالانسر بود. در نهایت، یک پیام خودکار در کانال چت ارسال می‌شد: «بازگشت انجام شد. در ۲۳ ثانیه.»"
    },
    { "pBold": "سرورهای موقتی و بازگشت با یک کلیک" },
    {
      "p": "هر Pull Request به‌طور خودکار یک ماشین مجازی موقت ایجاد می‌کرد که پیکربندی و بسته‌های نرم‌افزاری آن مشابه محیط عملیات بود. بازبین‌ها می‌توانستند با استفاده از یک URL مشترک، ویژگی جدید را دقیقا به همان شکلی که کاربران واقعی تجربه می‌کنند، آزمایش کنند. از آن‌جایی که هر نسخه کد (SHA) قابلیت انتشار یا بازگشت با یک کلیک داشت، نگرانی از شکست‌های احتمالی به‌طور چشمگیری کاهش یافت."
    },
    { "pBold": "انتشار از طریق گفت‌وگو" },
    {
      "p": "ربات‌های IRC پل ارتباطی بین مکالمات انسانی و وضعیت سامانه بودند. برای مثال:"
    },
    {
      "ul": [
        {
          "li": "دستور !deploy production انتشار را آغاز می‌کرد."
        },
        {
          "li": "!graph latency نمودار تاخیر۱۰ دقیقه اخیر را ارسال می‌کرد."
        },
        {
          "li": "!halt فرآیند انتشار را در میانه مسیر متوقف می‌نمود."
        }
      ]
    },
    {
      "p": "این الگو که بعدها با عنوان ChatOps شناخته شد، تیم‌های توسعه و عملیات را وارد گفت‌وگویی مشترک و هم‌زمان کرد و بسیاری از صف‌های انتظار و فرآیندهای دستی را حذف نمود."
    },
    {
      "title": "وقتی اندازه‌گیری بخشی از محصول است، نه فقط ابزار تحلیل"
    },
    {
      "p": "در سال ۲۰۱۰، مهندسی به نام لورا تامسون در پستی با عنوان «هر چیزی را اندازه بگیر، همه‌چیز را اندازه بگیر» اصول مهندسی داده‌محور Etsy را تشریح کرد. قانون تیم این بود: اگر جمع‌آوری یک داده آماری (Metric) بیش از یک خط کد پایتون نیاز دارد، یعنی ابزارها به‌درستی طراحی نشده‌اند."
    },
    {
      "p": "نمایشگرهایی در کافه‌تریای دفتر بروکلین قرار داده شده بود که داده‌هایی مثل سرعت انتشار کد، زمان بارگذاری صفحات در صدک ۹۹، نرخ خرید موفق، و سقف خطاها را به‌صورت لحظه‌ای نشان می‌دادند. این نمایشگرها باعث می‌شدند حتی نوسانات پنهان در عملکرد نیز فوراً توجه همه را جلب کند و کسی نتواند آن را نادیده بگیرد."
    },
    {
      "p": "در هر انتشار، وضعیت چند شاخص کلیدی عملکرد (KPI) پنج دقیقه قبل و پنج دقیقه بعد از انتشار بررسی می‌شد. اگر اختلاف بیش از ۵٪ بود، سیستم به‌صورت خودکار نسخه قبلی را بازمی‌گرداند."
    },
    {
      "p": "از آنجا که ثبت و مشاهده داده‌ها بسیار آسان بود، مهندسان حتی برای موارد جالبی مثل پراکندگی نتایج جست‌وجو یا مدت انتظار کنار دستگاه قهوه هم نمودار تهیه می‌کردند. در نتیجه، فرهنگ تصمیم‌گیری مبتنی بر داده در کل سازمان نهادینه شد."
    },
    {
      "title": "کالبدشکافیِ بدون مقصر: تبدیل خطاها به چرخه‌های یادگیری"
    },
    {
      "p": "پیش از سال ۲۰۰۹، مرور رویدادها در Etsy اغلب به جلساتی تبدیل می‌شد که در آن‌ها تلاش می‌شد «مقصر اصلی» شناسایی شود. جان آل‌اسپا (مدیر عملیات وقت) این الگو را کنار گذاشت و قالب جدیدی از کالبدشکافی بدون سرزنش را از صنعت هوافضا اقتباس کرد. در این الگو، مهندسی که اقدامش منجر به بروز حادثه شده بود، مسئولیت روایت رویداد را بر عهده می‌گرفت و به‌جای دفاع از خود، خط سیر زمانی، پیش‌فرض‌ها و موارد غیرمنتظره را به‌صورت شفاف توضیح می‌داد. بدون ترس از تنبیه یا سرزنش."
    },
    {
      "p": "اصول کلیدی این فرایند به شرح زیر بود:"
    },
    {
      "ul": [
        {
          "li": "سوال کلیدی «چه چیزی شما را غافلگیر کرد؟» کمک می‌کرد تا تفاوت بین مدل ذهنی افراد و واقعیت کشف شود."
        },
        {
          "li": "خروجی هر جلسه به اقدام عملی منتهی می‌شد: به‌روزرسانی زیرساخت، اضافه کردن یک تست جدید یا اضافه کردن یک محافظ در Deployinator. هیچ‌چیز فقط در گزارش باقی نمی‌ماند."
        },
        {
          "li": "نقش تسهیل‌گر بین اعضای تیم چرخشی بود؛ بنابراین همه مهندسان توانایی هدایت چنین گفت‌وگوهایی را یاد می‌گرفتند و فرصتی برای رشد مهارت همدلی و همکاری نیز بود."
        }
      ]
    },
    {
      "p": "با ایجاد فضای امن روانی، مهندسان تازه‌وارد می‌توانستند از همان روزهای ابتدایی کد خود را منتشر کنند. اگر مشکلی پیش می‌آمد، سیستم آن را شناسایی می‌کرد و تیم آن را فرصتی برای یادگیری می‌دانست. به تعبیر آن‌ها، «شهامت انتشار» دیگر مانعی برای سرعت تیم نبود، بلکه بخشی از فرهنگ سازمانی شده بود."
    },
    {
      "title": "پنجاه استقرار در روز: شاخص‌ها و تاثیر بر کسب‌و‌کار"
    },
    {
      "p": "تا سه‌ماهه نخست سال ۲۰۱۴، Etsy به‌طور میانگین بین ۵۰ تا ۷۰ استقرار در محیط عملیات در هر روز کاری انجام می‌داد؛ این آمار توسط «دنیل شاونبرگ» در کنفرانس QCon لندن تایید شد. اعمال تغییرات محدود به API در حدود ۱۸ ثانیه و انتشار کامل سایت در کمتر از سه دقیقه انجام می‌شد. از لحظه فشردن دکمه تا بارگذاری در شبکه."
    },
    {
      "p": "با کوچک‌تر شدن هر تغییر و ایزوله‌سازی آن‌ها، نرخ بروز خطاها سال‌به‌سال حدود ۲۰ درصد کاهش یافت. میانگین زمان بازیابی از خطا (MTTR) نیز از چند ساعت به چند دقیقه کاهش پیدا کرد؛ رایج‌ترین علت بازگشت نسخه، مشکلات ظاهری CSS بود، نه از دست رفتن داده‌ها."
    },
    {
      "p": "فرآیند جذب نیرو نیز تسهیل شد: افراد تازه‌وارد معمولا در همان هفته اول، نخستین تغییر خود را در سایت زنده منتشر می‌کردند و همین، به یکی از نقاط قوت Etsy در مصاحبه‌های فنی تبدیل شده بود."
    },
    {
      "p": "از منظر تجاری نیز دستاوردهای قابل‌توجهی حاصل شد:"
    },
    {
      "ul": [
        {
          "li": "اجرای سریع آزمون‌های A/B: آزمایش‌هایی برای بهینه‌سازی نرخ تبدیل فروشنده‌ها، ظرف چند ساعت راه‌اندازی می‌شدند، نه چند هفته."
        },
        {
          "li": "مادگی برای فروش‌های مناسبتی: در «سایبر ماندی» سال ۲۰۱۳، تعداد استقرارها به بیش از سه برابر حالت عادی رسید تا امکان فعال/غیرفعال‌سازی ویژگی‌ها (feature flags) برای کمپین‌های تبلیغاتی فعال شوند؛ بی‌آنکه حتی یک خطای بحرانی (Sev-1) رخ دهد."
        },
        {
          "li": "افزایش رضایت تیم مهندسی: نظرسنجی‌های داخلی بین سال‌های ۲۰۱۱ تا ۲۰۱۴ نشان دادند که حس امنیت مهندسان در انتشار کد، ۱۵ درصد افزایش یافته است."
        }
      ]
    },
    { "title": "تعادل میان سرعت و پایداری - هزینه‌های موفقیت" },
    {
      "p": "با رشد و بلوغ فرآیند انتشار، چالش‌های تازه‌ای نیز پدیدار شد. برای انجام مهاجرت‌های پایگاه‌داده، استفاده از فعال‌سازی تدریجی و طراحی‌های سازگار با نسخه‌های قبلی ضروری بود، چراکه هر هفته صدها انتشار می‌توانستند ساختار جداول را تحت تاثیر قرار دهند."
    },
    {
      "p": "تعداد شاخص‌های عملکرد به‌شدت افزایش یافت. بعضی از بسته‌های ارسالی به StatsD موجب مصرف بیش‌ازحد CPU می‌شدند. برای کنترل این موضوع، تیم توسعه لایه‌هایی برای تجمیع شاخص‌ها ایجاد کرد تا داده‌های با فراوانی بالا را خلاصه‌سازی و به‌شکل بهینه‌تری ارسال کنند."
    },
    {
      "p": "جایگزینی IRC با Slack، اگرچه امکانات بیشتری برای مسیردهی اعلان‌ها فراهم کرد، اما پدیده «خستگی ناشی از هشدار» (alert fatigue) را نیز به‌دنبال داشت. برای حل این مسئله، الگوریتم‌هایی جهت یادگیری آستانه‌های بهینه به‌کار گرفته شدند تا هشدارهای ناپایدار و مکرر به‌درستی فیلتر شوند."
    },
    { "title": "جمع‌بندی: از بحران تا بلوغ عملیاتی" },
    {
      "p": "مسیر تحول Etsy از یک اختلال ساده در سال ۲۰۰۹ آغاز شد؛ بحرانی که به‌جای سرزنش، به یک نقطهٔ عطف در فرهنگ و زیرساخت سازمان تبدیل شد. این شرکت با سرمایه‌گذاری هم‌زمان در ابزارهای استقرار، شفاف‌سازی معیارها، و ایجاد محیطی امن برای یادگیری از خطا، نشان داد که سرعت بالا در تحویل نرم‌افزار نه تنها با کیفیت تناقض ندارد، بلکه می‌تواند آن را ارتقا دهد."
    },
    {
      "p": "نتایج قابل اندازه‌گیری بودند: کاهش نرخ خطا، کاهش زمان بازیابی، افزایش اعتماد به فرآیند انتشار، و تسریع در نوآوری‌های محصول. اما شاید مهم‌تر از همه، نهادینه‌سازی فرهنگی بود که در آن «تغییر» نه تهدید، بلکه یک ظرفیت مستمر برای رشد تلقی می‌شد."
    },
    {
      "p": "تجربه Etsy الگویی کاربردی برای تیم‌هایی است که به‌دنبال پیاده‌سازی DevOps در عمل هستند: با ابزار مناسب، ذهنیت درست، و تمایل به بازآموزی مداوم، حتی پرتکرارترین انتشارها هم می‌توانند کم‌خطر، شفاف، و مولد باشند."
    },
    {
      "p": "در مجموع، مسیر تحول Etsy نشان می‌دهد که موفقیت در تحویل مداوم، نیازمند زیرساختی فنی، فرهنگی و انسانی است که بتواند با پیامدهای خودِ آن موفقیت نیز مقابله کند."
    },
    {
      "table": {
        "thead": ["رویکرد", "نمونه پیاده‌سازی در Etsy", "دلیل موفقیت و مقیاس‌پذیری"],
        "tbody": [
          [
            "اتومات‌سازی کارهای تکراری",
            "دیپلوی یک‌کلیکه (Deployinator)، چت‌بات‌های داخلی",
            "حذف نیاز به قهرمان‌بازی و مستندسازی فرآیند بازگشت (Rollback)"
          ],
          [
            "پایش پیش‌فرض و همیشگی",
            "اتصال سریع StatsD، داشبوردهای عمومی داده‌ها",
            "تصمیم‌گیری مبتنی بر داده؛ ایجاد حفاظ برای کشف سریع رگرسیون"
          ],
          [
            "استفاده از فیچر فلگ، نه شاخه‌بندی کد",
            "فعال/غیرفعال کردن کدهای ریسکی با فیچر فلگ",
            "جدا کردن دیپلوی از زمان عرضه (Launch) ویژگی"
          ],
          [
            "یادگیری بدون سرزنش",
            "جلسات بررسی پس از حادثه (Post-mortem) با تمرکز بر زمینه‌ها",
            "ایجاد فضای ایمن برای افزایش سرعت توسعه"
          ],
          [
            "ارائه تغییرات کوچک و مداوم",
            "بیش از ۵۰ دیپلوی روزانه، دیپلوی API در ۱۸ ثانیه",
            "کاهش دامنه خطا و افزایش سرعت بازگشت به حالت عادی (MTTR)"
          ]
        ]
      }
    }
    
  ]
}
